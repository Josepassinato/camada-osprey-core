# OSPREY Security Scanning Pipeline
name: Security Scan

on:
  schedule:
    # Run daily security scan
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  dependency-check:
    name: 🔍 Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 🔍 Python Security Check
      working-directory: ./backend
      run: |
        pip install safety bandit
        safety check --json > safety-report.json || true
        bandit -r . -f json -o bandit-report.json || true

    - name: 🔍 Node.js Security Check
      working-directory: ./frontend
      run: |
        npm audit --audit-level=high --json > npm-audit-report.json || true
        yarn audit --json > yarn-audit-report.json || true

    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          backend/safety-report.json
          backend/bandit-report.json
          frontend/npm-audit-report.json
          frontend/yarn-audit-report.json

  container-scan:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏗️ Build backend image for scanning
      run: |
        docker build -t osprey-backend-scan:latest ./backend

    - name: 🏗️ Build frontend image for scanning
      run: |
        docker build -t osprey-frontend-scan:latest ./frontend

    - name: 🔍 Scan backend image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: osprey-backend-scan:latest
        format: 'sarif'
        output: 'backend-trivy-results.sarif'

    - name: 🔍 Scan frontend image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: osprey-frontend-scan:latest
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'

    - name: 📊 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: |
          backend-trivy-results.sarif
          frontend-trivy-results.sarif

  code-scan:
    name: 🔍 CodeQL Security Analysis
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}

    - name: 🏗️ Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  secrets-scan:
    name: 🕵️ Secrets Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🕵️ Run secret scan with gitleaks
      uses: zricethezav/gitleaks-action@v1.6.0
      with:
        config-path: .gitleaks.toml

  license-check:
    name: 📄 License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 📄 Check Python licenses
      working-directory: ./backend
      run: |
        pip install pip-licenses
        pip-licenses --format=json --output-file=python-licenses.json

    - name: 📄 Check Node.js licenses
      working-directory: ./frontend
      run: |
        yarn install --frozen-lockfile
        npx license-checker --json --out nodejs-licenses.json

    - name: 📊 Upload license reports
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          backend/python-licenses.json
          frontend/nodejs-licenses.json