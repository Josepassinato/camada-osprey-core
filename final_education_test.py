#!/usr/bin/env python3
"""
Final comprehensive test of OSPREY Education System
Testing all requested endpoints with realistic Portuguese scenarios
"""

import requests
import json
import uuid
from datetime import datetime
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv('/app/frontend/.env')

BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://visawiz.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

print(f"üéì OSPREY Education System - Comprehensive Test")
print(f"Backend: {API_BASE}")
print("=" * 70)

# Test user credentials
TEST_USER = {
    "email": "test@osprey.com",
    "password": "TestUser123"
}
AUTH_TOKEN = None
INTERVIEW_SESSION_ID = None

def login_user():
    """Login and get auth token"""
    global AUTH_TOKEN
    print("\nüîê Autenticando usu√°rio...")
    
    payload = {
        "email": TEST_USER["email"],
        "password": TEST_USER["password"]
    }
    
    try:
        response = requests.post(f"{API_BASE}/auth/login", json=payload, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            AUTH_TOKEN = data.get('token')
            user = data.get('user', {})
            print(f"‚úÖ Login realizado com sucesso")
            print(f"   Usu√°rio: {user.get('first_name')} {user.get('last_name')}")
            print(f"   Email: {user.get('email')}")
            return True
        else:
            print(f"‚ùå Falha no login: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no login: {str(e)}")
        return False

def test_education_guides():
    """Test 1: GET /api/education/guides - Listar guias interativos"""
    print("\nüìö Teste 1: GET /api/education/guides - Listar guias interativos")
    
    headers = {"Authorization": f"Bearer {AUTH_TOKEN}"}
    
    try:
        response = requests.get(f"{API_BASE}/education/guides", headers=headers, timeout=15)
        
        if response.status_code == 200:
            data = response.json()
            guides = data.get('guides', [])
            print(f"‚úÖ Guias recuperados com sucesso")
            print(f"   Total de guias dispon√≠veis: {len(guides)}")
            
            for guide in guides:
                print(f"   - {guide.get('title')} ({guide.get('visa_type').upper()})")
                print(f"     Dificuldade: {guide.get('difficulty_level')}")
                print(f"     Tempo estimado: {guide.get('estimated_time_minutes')} minutos")
                print(f"     Se√ß√µes: {len(guide.get('sections', []))}")
            
            # Verify all expected guides are present
            visa_types = [guide.get('visa_type') for guide in guides]
            expected = ['h1b', 'f1', 'family']
            missing = [vt for vt in expected if vt not in visa_types]
            
            if not missing:
                print("‚úÖ Todos os guias esperados est√£o dispon√≠veis")
                return True
            else:
                print(f"‚ö†Ô∏è  Guias faltando: {missing}")
                return False
        else:
            print(f"‚ùå Falha: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
        return False

def test_specific_guide():
    """Test 2: GET /api/education/guides/{visa_type} - Detalhes de guia espec√≠fico"""
    print("\nüìñ Teste 2: GET /api/education/guides/h1b - Detalhes do guia H1-B")
    
    headers = {"Authorization": f"Bearer {AUTH_TOKEN}"}
    
    try:
        response = requests.get(f"{API_BASE}/education/guides?visa_type=h1b", headers=headers, timeout=15)
        
        if response.status_code == 200:
            data = response.json()
            guide = data.get('guide', {})
            print(f"‚úÖ Guia H1-B recuperado com sucesso")
            print(f"   T√≠tulo: {guide.get('title')}")
            print(f"   Descri√ß√£o: {guide.get('description')}")
            print(f"   N√≠vel: {guide.get('difficulty_level')}")
            print(f"   Tempo estimado: {guide.get('estimated_time_minutes')} minutos")
            print(f"   Se√ß√µes: {len(guide.get('sections', []))}")
            print(f"   Requisitos: {len(guide.get('requirements', []))}")
            print(f"   Erros comuns: {len(guide.get('common_mistakes', []))}")
            print(f"   Dicas de sucesso: {len(guide.get('success_tips', []))}")
            
            # Show some content details
            sections = guide.get('sections', [])
            if sections:
                print(f"   Primeira se√ß√£o: {sections[0].get('title')}")
            
            requirements = guide.get('requirements', [])
            if requirements:
                print(f"   Primeiro requisito: {requirements[0]}")
            
            return True
        else:
            print(f"‚ùå Falha: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
        return False

def test_education_progress():
    """Test 3: GET /api/education/progress - Progresso educacional do usu√°rio"""
    print("\nüìà Teste 3: GET /api/education/progress - Progresso educacional")
    
    headers = {"Authorization": f"Bearer {AUTH_TOKEN}"}
    
    try:
        response = requests.get(f"{API_BASE}/education/progress", headers=headers, timeout=15)
        
        if response.status_code == 200:
            data = response.json()
            progress = data.get('progress', {})
            print(f"‚úÖ Progresso educacional recuperado com sucesso")
            print(f"   Guias completados: {len(progress.get('guides_completed', []))}")
            print(f"   Entrevistas completadas: {len(progress.get('interviews_completed', []))}")
            print(f"   Consultas √† base de conhecimento: {progress.get('knowledge_queries', 0)}")
            print(f"   Tempo total de estudo: {progress.get('total_study_time_minutes', 0)} minutos")
            print(f"   Badges conquistados: {len(progress.get('achievement_badges', []))}")
            print(f"   Dicas n√£o lidas: {progress.get('unread_tips_count', 0)}")
            
            return True
        else:
            print(f"‚ùå Falha: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
        return False

def test_personalized_tips():
    """Test 4: GET /api/education/tips - Dicas personalizadas"""
    print("\nüí° Teste 4: GET /api/education/tips - Dicas personalizadas")
    
    headers = {"Authorization": f"Bearer {AUTH_TOKEN}"}
    
    try:
        response = requests.get(f"{API_BASE}/education/tips", headers=headers, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            tips = data.get('tips', [])
            print(f"‚úÖ Dicas personalizadas recuperadas com sucesso")
            print(f"   Total de dicas: {len(tips)}")
            
            for i, tip in enumerate(tips[:3]):  # Show first 3 tips
                print(f"   Dica {i+1}: {tip.get('title')}")
                print(f"           Categoria: {tip.get('tip_category')}")
                print(f"           Prioridade: {tip.get('priority')}")
                print(f"           Lida: {'Sim' if tip.get('is_read') else 'N√£o'}")
                print(f"           Conte√∫do: {tip.get('content', '')[:100]}...")
            
            # Verify tips are in Portuguese
            if tips:
                content = tips[0].get('content', '').lower()
                has_portuguese = any(word in content for word in ['voc√™', 'seus', 'para', 'com', 'documentos', 'aplica√ß√£o'])
                if has_portuguese:
                    print("‚úÖ Dicas fornecidas em portugu√™s")
                else:
                    print("‚ö†Ô∏è  Idioma das dicas n√£o identificado claramente")
            
            return True
        else:
            print(f"‚ùå Falha: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
        return False

def test_interview_start():
    """Test 5: POST /api/education/interview/start - Iniciar simula√ß√£o de entrevista"""
    print("\nüé§ Teste 5: POST /api/education/interview/start - Simula√ß√£o de entrevista")
    global INTERVIEW_SESSION_ID
    
    headers = {"Authorization": f"Bearer {AUTH_TOKEN}"}
    
    try:
        payload = {
            "interview_type": "consular",
            "visa_type": "h1b",
            "difficulty_level": "beginner"
        }
        
        response = requests.post(f"{API_BASE}/education/interview/start", json=payload, headers=headers, timeout=60)
        
        if response.status_code == 200:
            data = response.json()
            INTERVIEW_SESSION_ID = data.get('session_id')
            questions = data.get('questions', [])
            
            print(f"‚úÖ Simula√ß√£o de entrevista iniciada com sucesso")
            print(f"   ID da sess√£o: {INTERVIEW_SESSION_ID}")
            print(f"   Total de perguntas: {data.get('total_questions', 0)}")
            print(f"   Dura√ß√£o estimada: {data.get('estimated_duration', 0)} minutos")
            print(f"   Perguntas geradas: {len(questions)}")
            
            if questions:
                first_q = questions[0]
                print(f"   Primeira pergunta (EN): {first_q.get('question_en', 'N/A')[:80]}...")
                print(f"   Primeira pergunta (PT): {first_q.get('question_pt', 'N/A')[:80]}...")
                print(f"   Categoria: {first_q.get('category', 'N/A')}")
                print(f"   Dicas dispon√≠veis: {len(first_q.get('tips', []))}")
                print(f"   Pontos-chave: {len(first_q.get('key_points', []))}")
            
            return True
        else:
            print(f"‚ùå Falha: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
        return False

def test_interview_answer():
    """Test 6: POST /api/education/interview/{session_id}/answer - Enviar resposta"""
    print("\nüí¨ Teste 6: POST /api/education/interview/{session_id}/answer - Resposta")
    
    if not INTERVIEW_SESSION_ID:
        print("‚ùå ID da sess√£o n√£o dispon√≠vel")
        return False
    
    headers = {"Authorization": f"Bearer {AUTH_TOKEN}"}
    
    try:
        payload = {
            "question_id": "q1",
            "answer": "Eu venho aos Estados Unidos para trabalhar como engenheiro de software em uma empresa de tecnologia. Tenho uma oferta de emprego v√°lida da empresa TechCorp e pretendo contribuir com minhas habilidades em desenvolvimento de software e intelig√™ncia artificial para projetos inovadores."
        }
        
        response = requests.post(
            f"{API_BASE}/education/interview/{INTERVIEW_SESSION_ID}/answer", 
            json=payload, 
            headers=headers, 
            timeout=45
        )
        
        if response.status_code == 200:
            data = response.json()
            feedback = data.get('feedback', {})
            
            print(f"‚úÖ Resposta da entrevista enviada com sucesso")
            print(f"   Pontua√ß√£o: {feedback.get('score', 'N/A')}/100")
            print(f"   N√≠vel de confian√ßa: {feedback.get('confidence_level', 'N/A')}")
            print(f"   Pontos fortes: {len(feedback.get('strengths', []))}")
            print(f"   Pontos fracos: {len(feedback.get('weaknesses', []))}")
            print(f"   Sugest√µes: {len(feedback.get('suggestions', []))}")
            print(f"   Pr√≥xima pergunta: {data.get('next_question_index', 'N/A')}")
            
            # Show feedback details
            if feedback.get('strengths'):
                print(f"   Primeiro ponto forte: {feedback['strengths'][0]}")
            if feedback.get('suggestions'):
                print(f"   Primeira sugest√£o: {feedback['suggestions'][0]}")
            
            # Check if feedback is in Portuguese
            improved_answer = feedback.get('improved_answer', '')
            if any(word in improved_answer.lower() for word in ['voc√™', 'sua', 'mais', 'para', 'com']):
                print("‚úÖ Feedback fornecido em portugu√™s")
            else:
                print("‚ö†Ô∏è  Idioma do feedback n√£o identificado claramente")
            
            return True
        else:
            print(f"‚ùå Falha: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
        return False

def test_interview_complete():
    """Test 7: POST /api/education/interview/{session_id}/complete - Completar entrevista"""
    print("\nüèÅ Teste 7: POST /api/education/interview/{session_id}/complete - Finalizar")
    
    if not INTERVIEW_SESSION_ID:
        print("‚ùå ID da sess√£o n√£o dispon√≠vel")
        return False
    
    headers = {"Authorization": f"Bearer {AUTH_TOKEN}"}
    
    try:
        response = requests.post(
            f"{API_BASE}/education/interview/{INTERVIEW_SESSION_ID}/complete", 
            headers=headers, 
            timeout=45
        )
        
        if response.status_code == 200:
            data = response.json()
            feedback = data.get('overall_feedback', {})
            
            print(f"‚úÖ Entrevista completada com sucesso")
            print(f"   Sess√£o finalizada: {'Sim' if data.get('session_completed') else 'N√£o'}")
            print(f"   Pontua√ß√£o geral: {feedback.get('overall_score', 'N/A')}/100")
            print(f"   Perguntas respondidas: {feedback.get('questions_answered', 'N/A')}")
            print(f"   Confian√ßa m√©dia: {feedback.get('average_confidence', 'N/A')}")
            print(f"   Pontos fortes: {len(feedback.get('strengths', []))}")
            print(f"   √Åreas para melhoria: {len(feedback.get('areas_for_improvement', []))}")
            print(f"   Recomenda√ß√µes: {len(feedback.get('recommendations', []))}")
            
            return True
        else:
            print(f"‚ùå Falha: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
        return False

def test_knowledge_base_search():
    """Test 8: POST /api/education/knowledge-base/search - Buscar na base de conhecimento"""
    print("\nüîç Teste 8: POST /api/education/knowledge-base/search - Base de conhecimento")
    
    headers = {"Authorization": f"Bearer {AUTH_TOKEN}"}
    
    try:
        payload = {
            "query": "Como aplicar para H1-B? Quais s√£o os requisitos principais e qual √© o processo completo?",
            "visa_type": "h1b",
            "category": "application"
        }
        
        response = requests.post(f"{API_BASE}/education/knowledge-base/search", json=payload, headers=headers, timeout=60)
        
        if response.status_code == 200:
            data = response.json()
            
            print(f"‚úÖ Busca na base de conhecimento realizada com sucesso")
            print(f"   Tamanho da resposta: {len(data.get('answer', ''))} caracteres")
            print(f"   T√≥picos relacionados: {len(data.get('related_topics', []))}")
            print(f"   Pr√≥ximos passos: {len(data.get('next_steps', []))}")
            print(f"   Recursos: {len(data.get('resources', []))}")
            print(f"   Avisos: {len(data.get('warnings', []))}")
            print(f"   N√≠vel de confian√ßa: {data.get('confidence', 'N/A')}")
            
            # Show answer preview
            answer = data.get('answer', '')
            if answer:
                print(f"   Pr√©via da resposta: {answer[:200]}...")
            
            # Show related topics
            topics = data.get('related_topics', [])
            if topics:
                print(f"   T√≥picos relacionados: {', '.join(topics[:3])}")
            
            # Check for legal disclaimers
            answer_lower = answer.lower()
            warnings = ' '.join(data.get('warnings', [])).lower()
            
            disclaimer_phrases = ['consultoria jur√≠dica', 'advogado', 'n√£o substitui', 'educativa', 'orienta√ß√£o']
            has_disclaimer = any(phrase in (answer_lower + warnings) for phrase in disclaimer_phrases)
            
            if has_disclaimer:
                print("‚úÖ Disclaimers legais presentes na resposta")
            else:
                print("‚ö†Ô∏è  Disclaimers legais n√£o identificados claramente")
            
            # Check if answer is in Portuguese
            portuguese_words = ['para', 'como', 'voc√™', 'processo', 'aplica√ß√£o', 'visto', 'requisitos']
            if any(word in answer_lower for word in portuguese_words):
                print("‚úÖ Resposta fornecida em portugu√™s")
            else:
                print("‚ö†Ô∏è  Idioma da resposta n√£o identificado claramente")
            
            return True
        else:
            print(f"‚ùå Falha: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
        return False

def test_dashboard_integration():
    """Test 9: GET /api/dashboard - Verificar integra√ß√£o das estat√≠sticas educacionais"""
    print("\nüìä Teste 9: GET /api/dashboard - Integra√ß√£o das estat√≠sticas educacionais")
    
    headers = {"Authorization": f"Bearer {AUTH_TOKEN}"}
    
    try:
        response = requests.get(f"{API_BASE}/dashboard", headers=headers, timeout=15)
        
        if response.status_code == 200:
            data = response.json()
            user_info = data.get('user', {})
            stats = data.get('stats', {})
            
            print(f"‚úÖ Dashboard com estat√≠sticas educacionais carregado com sucesso")
            print(f"   Usu√°rio: {user_info.get('name')} ({user_info.get('email')})")
            print(f"   Guias completados: {stats.get('guides_completed', 0)}")
            print(f"   Entrevistas completadas: {stats.get('interviews_completed', 0)}")
            print(f"   Tempo total de estudo: {stats.get('total_study_time', 0)} minutos")
            print(f"   Dicas n√£o lidas: {stats.get('unread_tips', 0)}")
            print(f"   Total de aplica√ß√µes: {stats.get('total_applications', 0)}")
            print(f"   Total de documentos: {stats.get('total_documents', 0)}")
            
            # Verify education stats are present
            education_keys = ['guides_completed', 'interviews_completed', 'total_study_time', 'unread_tips']
            has_education_stats = all(key in stats for key in education_keys)
            
            if has_education_stats:
                print("‚úÖ Estat√≠sticas educacionais integradas corretamente no dashboard")
            else:
                missing = [key for key in education_keys if key not in stats]
                print(f"‚ö†Ô∏è  Estat√≠sticas educacionais faltando: {missing}")
            
            return True
        else:
            print(f"‚ùå Falha: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
        return False

def run_comprehensive_education_tests():
    """Run all comprehensive education system tests"""
    print("üéì OSPREY - Sistema de Educa√ß√£o Integrado - Teste Completo")
    print(f"‚è∞ Teste iniciado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Login first
    if not login_user():
        print("‚ùå N√£o √© poss√≠vel prosseguir sem autentica√ß√£o")
        return
    
    # Run all education tests in order
    test_functions = [
        ("Listar Guias Interativos", test_education_guides),
        ("Detalhes de Guia Espec√≠fico", test_specific_guide),
        ("Progresso Educacional", test_education_progress),
        ("Dicas Personalizadas", test_personalized_tips),
        ("Iniciar Simula√ß√£o de Entrevista", test_interview_start),
        ("Enviar Resposta da Entrevista", test_interview_answer),
        ("Completar Entrevista", test_interview_complete),
        ("Buscar na Base de Conhecimento", test_knowledge_base_search),
        ("Integra√ß√£o das Estat√≠sticas no Dashboard", test_dashboard_integration)
    ]
    
    results = {}
    for test_name, test_func in test_functions:
        results[test_name] = test_func()
    
    print("\n" + "=" * 70)
    print("üìä RESULTADOS DOS TESTES DO SISTEMA EDUCACIONAL")
    print("=" * 70)
    
    passed = sum(results.values())
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"  {test_name}: {status}")
    
    print(f"\nüéØ RESULTADO GERAL: {passed}/{total} testes passaram ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("üéâ Todos os testes do sistema educacional passaram!")
        print("   Sistema educacional OSPREY funcionando perfeitamente.")
        print("   ‚úÖ Integra√ß√£o com OpenAI GPT-4 funcionando")
        print("   ‚úÖ Respostas em portugu√™s com disclaimers legais")
        print("   ‚úÖ Persist√™ncia de dados funcionando")
        print("   ‚úÖ Sistema de autentica√ß√£o funcionando")
    elif passed >= total - 1:
        print("‚úÖ Sistema educacional funcionando corretamente com problemas menores.")
    else:
        print("‚ö†Ô∏è  Alguns testes cr√≠ticos falharam. Verifique os detalhes acima.")
    
    return results

if __name__ == "__main__":
    run_comprehensive_education_tests()