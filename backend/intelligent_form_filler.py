"""
Intelligent Form Filler System
Sistema inteligente de preenchimento de formul√°rios USCIS
Integra dados dos documentos validados com formul√°rios oficiais
"""

import logging
from typing import Dict, List, Any, Optional, Union
from datetime import datetime, timezone
import json
import re
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class FormSuggestion:
    """Sugest√£o de preenchimento de campo"""
    field_id: str
    suggested_value: str
    confidence: float
    source: str  # 'document', 'basic_data', 'ai_analysis'
    explanation: str

@dataclass
class FormValidationResult:
    """Resultado de valida√ß√£o de formul√°rio"""
    is_valid: bool
    errors: List[Dict[str, Any]]
    warnings: List[Dict[str, Any]]
    completeness_score: float
    suggestions: List[FormSuggestion]

class IntelligentFormFiller:
    """
    Sistema inteligente de preenchimento de formul√°rios
    Combina dados de documentos + valida√ß√£o em tempo real + Dra. Ana
    """
    
    def __init__(self):
        self.form_mappings = self._initialize_form_mappings()
        
    def _initialize_form_mappings(self) -> Dict[str, Dict[str, str]]:
        """Mapeamento de dados extra√≠dos para campos de formul√°rio"""
        return {
            'H-1B': {
                'full_name': ['full_name', 'applicant_name', 'beneficiary_name'],
                'date_of_birth': ['date_of_birth', 'birth_date', 'dob'],
                'place_of_birth': ['place_of_birth', 'birth_place', 'country_of_birth'],
                'passport_number': ['passport_number', 'document_number', 'passport_no'],
                'passport_country': ['passport_country', 'nationality', 'country_of_issuance'],
                'current_address': ['current_address', 'mailing_address', 'residence_address'],
                'phone': ['phone_number', 'telephone', 'contact_phone'],
                'email': ['email_address', 'email', 'contact_email']
            },
            'B-1/B-2': {
                'full_name': ['full_name', 'applicant_name', 'traveler_name'],
                'date_of_birth': ['date_of_birth', 'birth_date'],
                'passport_number': ['passport_number', 'travel_document_number'],
                'purpose_of_visit': ['purpose_of_visit', 'travel_purpose', 'visit_reason']
            },
            'F-1': {
                'full_name': ['full_name', 'student_name', 'applicant_name'],
                'school_name': ['school_name', 'institution_name', 'university_name'],
                'degree_program': ['degree_program', 'program_of_study', 'field_of_study']
            }
        }
    
    async def generate_intelligent_suggestions(
        self, 
        case_data: Dict[str, Any], 
        form_code: str,
        current_form_data: Dict[str, Any] = None,
        db_connection = None
    ) -> List[FormSuggestion]:
        """
        Gera sugest√µes inteligentes baseadas em dados dos documentos
        """
        suggestions = []
        
        try:
            # Extrair dados de m√∫ltiplas fontes
            basic_data = case_data.get('basic_data', {})
            ai_extracted_facts = case_data.get('ai_extracted_facts', {})
            
            # Buscar documentos validados para este caso
            document_analysis = []
            if db_connection and case_data.get('case_id'):
                case_id = case_data['case_id']
                documents_cursor = db_connection.documents.find({"case_id": case_id})
                case_documents = await documents_cursor.to_list(length=None)
                
                logger.info(f"üîç Encontrados {len(case_documents)} documentos para caso {case_id}")
                
                # Extrair an√°lises dos documentos
                for doc in case_documents:
                    if doc.get('ai_analysis'):
                        document_analysis.append(doc['ai_analysis'])
            
            logger.info(f"ü§ñ Gerando sugest√µes para {form_code} com {len(document_analysis)} documentos analisados")
            
            # Processar an√°lises de documentos
            extracted_data = self._extract_data_from_documents(document_analysis)
            
            # Combinar com dados b√°sicos
            combined_data = {**basic_data, **extracted_data, **ai_extracted_facts}
            
            # Gerar sugest√µes baseadas no tipo de formul√°rio
            form_fields = self.form_mappings.get(form_code, {})
            
            for target_field, possible_sources in form_fields.items():
                suggestion = self._find_best_suggestion(
                    target_field, possible_sources, combined_data, current_form_data
                )
                if suggestion:
                    suggestions.append(suggestion)
            
            # Sugest√µes espec√≠ficas por tipo de visto
            if form_code == 'H-1B':
                suggestions.extend(self._generate_h1b_specific_suggestions(combined_data))
            elif form_code == 'B-1/B-2':
                suggestions.extend(self._generate_b1b2_specific_suggestions(combined_data))
            
            logger.info(f"‚úÖ Geradas {len(suggestions)} sugest√µes inteligentes")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar sugest√µes: {str(e)}")
        
        return suggestions
    
    def _extract_data_from_documents(self, document_analysis: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Extrai dados √∫teis das an√°lises de documentos"""
        
        extracted_data = {}
        
        for doc_analysis in document_analysis:
            if not isinstance(doc_analysis, dict):
                continue
                
            # Extrair dados do sistema de vis√£o real
            extracted_doc_data = doc_analysis.get('extracted_data', {})
            
            if extracted_doc_data:
                # Dados de passaporte
                if 'full_name' in extracted_doc_data:
                    extracted_data['full_name'] = extracted_doc_data['full_name']
                    extracted_data['passport_name'] = extracted_doc_data['full_name']
                
                if 'nationality' in extracted_doc_data:
                    extracted_data['nationality'] = extracted_doc_data['nationality']
                    extracted_data['passport_country'] = extracted_doc_data['nationality']
                
                if 'document_number' in extracted_doc_data:
                    extracted_data['passport_number'] = extracted_doc_data['document_number']
                
                if 'place_of_birth' in extracted_doc_data:
                    extracted_data['place_of_birth'] = extracted_doc_data['place_of_birth']
                
                # Dados de CNH
                if 'license_number' in extracted_doc_data:
                    extracted_data['license_number'] = extracted_doc_data['license_number']
                
                # Dados gerais
                for field in ['issue_date', 'expiry_date', 'issuing_authority']:
                    if field in extracted_doc_data:
                        extracted_data[field] = extracted_doc_data[field]
        
        return extracted_data
    
    def _find_best_suggestion(
        self, 
        target_field: str, 
        possible_sources: List[str], 
        combined_data: Dict[str, Any],
        current_form_data: Dict[str, Any] = None
    ) -> Optional[FormSuggestion]:
        """Encontra a melhor sugest√£o para um campo"""
        
        # Verificar se campo j√° est√° preenchido
        if current_form_data and current_form_data.get(target_field):
            return None
        
        for source_field in possible_sources:
            value = combined_data.get(source_field)
            if value and isinstance(value, str) and len(value.strip()) > 0:
                
                # Determinar fonte e confian√ßa
                source_type = self._determine_source_type(source_field, combined_data)
                confidence = self._calculate_confidence(value, source_type)
                
                # Formatar valor conforme necess√°rio
                formatted_value = self._format_field_value(target_field, value)
                
                return FormSuggestion(
                    field_id=target_field,
                    suggested_value=formatted_value,
                    confidence=confidence,
                    source=source_type,
                    explanation=f"Extra√≠do de {source_type}: {source_field}"
                )
        
        return None
    
    def _determine_source_type(self, field_name: str, combined_data: Dict[str, Any]) -> str:
        """Determina o tipo de fonte dos dados"""
        
        if field_name in ['firstName', 'lastName', 'city', 'state']:
            return 'basic_data'
        elif 'passport' in field_name.lower() or 'document' in field_name.lower():
            return 'document'
        elif 'extracted' in field_name.lower() or 'ai' in field_name.lower():
            return 'ai_analysis'
        else:
            return 'document'
    
    def _calculate_confidence(self, value: str, source_type: str) -> float:
        """Calcula confian√ßa na sugest√£o"""
        
        base_confidence = {
            'document': 0.95,  # Dados extra√≠dos de documentos t√™m alta confian√ßa
            'basic_data': 0.85,  # Dados inseridos pelo usu√°rio
            'ai_analysis': 0.80   # An√°lise de IA
        }.get(source_type, 0.70)
        
        # Ajustar baseado na qualidade do valor
        if len(value) < 3:
            base_confidence *= 0.6
        elif len(value) > 50:
            base_confidence *= 0.8
        elif re.match(r'^[A-Z\s]+$', value):  # Nomes em mai√∫sculas
            base_confidence *= 1.1
        
        return min(1.0, base_confidence)
    
    def _format_field_value(self, field_name: str, value: str) -> str:
        """Formata valor conforme necess√°rio para o campo"""
        
        # Formata√ß√£o de nomes
        if 'name' in field_name.lower():
            return self._format_name(value)
        
        # Formata√ß√£o de datas
        elif 'date' in field_name.lower():
            return self._format_date(value)
        
        # Formata√ß√£o de endere√ßos
        elif 'address' in field_name.lower():
            return self._format_address(value)
        
        # Formata√ß√£o de n√∫meros de documento
        elif any(doc_type in field_name.lower() for doc_type in ['passport', 'license', 'document']):
            return value.upper().replace(' ', '')
        
        return value.strip()
    
    def _format_name(self, name: str) -> str:
        """Formata nomes adequadamente"""
        # Converter para title case, mas manter acentos
        return ' '.join(word.capitalize() for word in name.strip().split())
    
    def _format_date(self, date_str: str) -> str:
        """Formata datas para padr√£o americano MM/DD/YYYY"""
        try:
            # Tentar diferentes formatos
            for fmt in ['%d/%m/%Y', '%Y-%m-%d', '%m/%d/%Y']:
                try:
                    date_obj = datetime.strptime(date_str, fmt)
                    return date_obj.strftime('%m/%d/%Y')
                except:
                    continue
        except:
            pass
        return date_str
    
    def _format_address(self, address: str) -> str:
        """Formata endere√ßos"""
        return address.strip().title()
    
    def _generate_h1b_specific_suggestions(self, combined_data: Dict[str, Any]) -> List[FormSuggestion]:
        """Sugest√µes espec√≠ficas para H-1B"""
        suggestions = []
        
        # Sugest√£o de classe de admiss√£o
        if not combined_data.get('class_of_admission'):
            suggestions.append(FormSuggestion(
                field_id='class_of_admission',
                suggested_value='H-1B',
                confidence=0.95,
                source='form_logic',
                explanation='Classe de admiss√£o padr√£o para peti√ß√£o H-1B'
            ))
        
        # Sugest√£o de dura√ß√£o da perman√™ncia
        if not combined_data.get('duration_of_stay'):
            suggestions.append(FormSuggestion(
                field_id='duration_of_stay',
                suggested_value='3 years',
                confidence=0.90,
                source='form_logic',
                explanation='Dura√ß√£o padr√£o inicial para H-1B'
            ))
        
        return suggestions
    
    def _generate_b1b2_specific_suggestions(self, combined_data: Dict[str, Any]) -> List[FormSuggestion]:
        """Sugest√µes espec√≠ficas para B-1/B-2"""
        suggestions = []
        
        # Sugest√£o de dura√ß√£o da visita
        if not combined_data.get('duration_of_visit'):
            suggestions.append(FormSuggestion(
                field_id='duration_of_visit',
                suggested_value='30 days',
                confidence=0.80,
                source='form_logic',
                explanation='Dura√ß√£o t√≠pica para visita de turismo/neg√≥cios'
            ))
        
        return suggestions
    
    async def validate_form_with_dra_ana(
        self, 
        form_data: Dict[str, Any], 
        visa_type: str, 
        step_id: str = "form_review"
    ) -> FormValidationResult:
        """
        Valida√ß√£o completa do formul√°rio usando Dra. Ana
        """
        try:
            from specialized_agents import create_form_validator
            
            validator = create_form_validator()
            
            # Prompt espec√≠fico para valida√ß√£o
            validation_prompt = f"""
            VALIDA√á√ÉO COMPLETA DE FORMUL√ÅRIO USCIS
            
            TIPO DE VISTO: {visa_type}
            ETAPA: {step_id}
            
            DADOS DO FORMUL√ÅRIO:
            {json.dumps(form_data, indent=2, ensure_ascii=False)}
            
            EXECUTE VALIDA√á√ÉO SISTEM√ÅTICA:
            
            1. CAMPOS OBRIGAT√ìRIOS:
            - Verifique se todos os campos obrigat√≥rios para {visa_type} est√£o preenchidos
            - Liste campos em falta com severidade (cr√≠tico/importante/opcional)
            
            2. CONSIST√äNCIA DE DADOS:
            - Verificar formato de datas (MM/DD/YYYY)
            - Validar formatos de nomes (consist√™ncia)
            - Conferir n√∫meros de documentos
            
            3. L√ìGICA DE NEG√ìCIO:
            - Verificar se dados fazem sentido para {visa_type}
            - Identificar inconsist√™ncias entre campos relacionados
            
            4. SUGEST√ïES DE MELHORIA:
            - Campos que podem ser otimizados
            - Informa√ß√µes adicionais que ajudariam
            
            FORMATO DE RESPOSTA:
            {{
                "validation_result": "APROVADO/REPROVADO/COM_RESSALVAS",
                "completeness_score": [0-100],
                "critical_errors": [lista de erros cr√≠ticos],
                "warnings": [lista de avisos],
                "suggestions": [lista de sugest√µes],
                "missing_fields": [campos obrigat√≥rios em falta],
                "next_steps": "orienta√ß√£o sobre pr√≥ximos passos"
            }}
            """
            
            session_id = f"form_validation_{visa_type}_{hash(str(form_data)) % 10000}"
            analysis = await validator._call_agent(validation_prompt, session_id)
            
            # Processar resposta da Dra. Ana
            validation_data = self._process_dra_ana_response(analysis)
            
            return FormValidationResult(
                is_valid=validation_data.get('validation_result') == 'APROVADO',
                errors=validation_data.get('critical_errors', []),
                warnings=validation_data.get('warnings', []),
                completeness_score=float(validation_data.get('completeness_score', 0)),
                suggestions=self._convert_to_form_suggestions(validation_data.get('suggestions', []))
            )
            
        except Exception as e:
            logger.error(f"‚ùå Erro na valida√ß√£o com Dra. Ana: {str(e)}")
            
            # Retornar valida√ß√£o b√°sica em caso de erro
            return FormValidationResult(
                is_valid=False,
                errors=[{"message": "Erro na valida√ß√£o autom√°tica", "severity": "high"}],
                warnings=[],
                completeness_score=0.0,
                suggestions=[]
            )
    
    def _process_dra_ana_response(self, analysis: str) -> Dict[str, Any]:
        """Processa resposta da Dra. Ana"""
        
        try:
            # Tentar extrair JSON da resposta
            import json
            import re
            
            # Procurar por JSON na resposta
            json_match = re.search(r'\{.*\}', analysis, re.DOTALL)
            if json_match:
                return json.loads(json_match.group())
            
            # Se n√£o encontrar JSON, processar texto
            return {
                "validation_result": "COM_RESSALVAS",
                "completeness_score": 75,
                "critical_errors": [],
                "warnings": ["Resposta de valida√ß√£o n√£o estruturada"],
                "suggestions": [],
                "analysis_text": analysis
            }
            
        except Exception as e:
            logger.error(f"Erro ao processar resposta da Dra. Ana: {e}")
            return {
                "validation_result": "COM_RESSALVAS", 
                "completeness_score": 50,
                "critical_errors": ["Erro no processamento da valida√ß√£o"],
                "warnings": [],
                "suggestions": []
            }
    
    def _convert_to_form_suggestions(self, suggestions_data: List[Any]) -> List[FormSuggestion]:
        """Converte sugest√µes da Dra. Ana para objetos FormSuggestion"""
        
        suggestions = []
        
        for suggestion in suggestions_data:
            if isinstance(suggestion, str):
                suggestions.append(FormSuggestion(
                    field_id="general",
                    suggested_value="",
                    confidence=0.80,
                    source="dra_ana",
                    explanation=suggestion
                ))
            elif isinstance(suggestion, dict):
                suggestions.append(FormSuggestion(
                    field_id=suggestion.get('field', 'general'),
                    suggested_value=suggestion.get('value', ''),
                    confidence=suggestion.get('confidence', 0.80),
                    source="dra_ana",
                    explanation=suggestion.get('explanation', str(suggestion))
                ))
        
        return suggestions


# Fun√ß√£o helper para uso f√°cil
async def get_intelligent_form_suggestions(case_data: Dict[str, Any], form_code: str, db_connection = None) -> List[Dict[str, Any]]:
    """
    Fun√ß√£o helper para obter sugest√µes inteligentes de preenchimento
    """
    filler = IntelligentFormFiller()
    suggestions = await filler.generate_intelligent_suggestions(case_data, form_code, db_connection=db_connection)
    
    # Converter para formato JSON serializ√°vel
    return [
        {
            "field_id": s.field_id,
            "suggested_value": s.suggested_value,
            "confidence": s.confidence,
            "source": s.source,
            "explanation": s.explanation
        }
        for s in suggestions
    ]

async def validate_form_with_ai(form_data: Dict[str, Any], visa_type: str) -> Dict[str, Any]:
    """
    Fun√ß√£o helper para valida√ß√£o de formul√°rio com IA
    """
    filler = IntelligentFormFiller()
    result = await filler.validate_form_with_dra_ana(form_data, visa_type)
    
    return {
        "is_valid": result.is_valid,
        "errors": result.errors,
        "warnings": result.warnings,
        "completeness_score": result.completeness_score,
        "suggestions": [
            {
                "field_id": s.field_id,
                "suggested_value": s.suggested_value,
                "confidence": s.confidence,
                "source": s.source,
                "explanation": s.explanation
            }
            for s in result.suggestions
        ]
    }